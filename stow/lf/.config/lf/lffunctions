cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
	image/vnd.djvu|application/pdf|application/x-fictionbook+xml|application/x-fictionbook|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
        text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
		setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
			[ -z "$file" ] && continue
			lf -remote "send select \"$file\""
			lf -remote "send toggle"
		done &
		;;
	audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	application/pgp-encrypted) $EDITOR $fx ;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template|application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint|application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template|application/vnd.oasis.opendocument.formula|application/vnd.oasis.opendocument.database) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}


cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract?[y/N]"
	read ans
	[ $ans = "y" ] && aunpack $fx
}}


cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd follow_link %{{
	lf -remote "send ${id} select \"$(readlink $f)\""
}}

cmd trash ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "Delete (to trash)?[y/N]"
	read ans
	[ $ans = "y" ] && { trash-put $fx; notify-send " File(s) moved to Trash."; }
}}
# 🚚 󰦫 

#cmd trash ${{
#    set -f
#    if gio trash 2>/dev/null; then
#        gio trash $fx
#    else
#        mkdir -p ~/.trash
#        mv -- $fx ~/.trash
#    fi
#}}

cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

cmd trash-restore %{{
  set -f
  ft=$(basename -a $fx|sed -e 's/^/trash:\/\/\//')
  gio trash --restore $ft
  echo 'restored' $(basename -a $fx)
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done #&&
#	notify-send " File(s) moved." "File(s) moved to $dest."
}}
# 🚚
cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done #&&
	#notify-send "📋 File(s) copied." "File(s) copies to $dest."
}}

cmd compress ${{
    set -f
    echo $fx
    archivetype="$(cat ${XDG_CONFIG_HOME:-$HOME/.config}/lf/lfarchtypes | fzf)"
	printf "Enter archive name without extension [$archivetype]: "
	read ans
	echo "ANS: $ans"
    #echo "Archtype:" $archivetype
    #archivename="$f.${archivetype}"
    #echo "ArchName:" $archivename

    #archivedirname="$f.${archivetype}"
    #echo "ArchDirName:" $archivedirname
    
    #relativearchivename="$(echo ${archivename} | sed -n 's/^\(.*\/\)*\(.*\)/\2/p')"
    #echo "RelArchName: $relativearchivename"

    #relativearchivedirname="$(echo ${archivedirname} | sed -n 's/^\(.*\/\)*\(.*\)/\2/p')"
    #echo "RelArchDirName: $relativearchivedirname"
    #TMP=`mktemp -d /tmp/atool.XXXXXXXXXX`
    TMP=`mktemp -d atool.XXXXXXXXXX`
    #echo "TMP: $TMP"
    #mkdir "/tmp/$relativearchivedirname" #"$f.${archivetype}.temp"
    cp -r $fx $TMP #"/tmp/$relativearchivedirname" #"$f.${archivetype}.temp"
    #echo $ans.$archivetype
    #temparchivedir="/tmp/$relativearchivedirname"
    apack -F${archivetype} $ans.$archivetype $TMP #$temparchivedir #${relativearchivename} ${relativearchivedirname}
    #atool -a -F${archivetype} ${relativearchivename} ${archivedirname}
    rm -rf -- $TMP
    #echo $PWD
}}

cmd on-select &{{
    lf -remote "send $id set statfmt \"$(exa -ld --color=always "$f")\""
}}

cmd test ${{
    set -f
    clear
    echo "f:" $f
    echo "fx:" $fx
    echo "fs:" $fs
}}

cmd drag-n-drop ${{
    #set -f
    #set ifs "\n"
    printf %"s\n" $fx | ripdrag -I -n
}}
